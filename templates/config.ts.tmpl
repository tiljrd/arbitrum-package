import { ethers } from 'hardhat'

export const maxDataSize = ethers.BigNumber.from(117964)

// Minimal placeholder config to satisfy imports when isDevDeployment=true.
// Not used by our deployment path but required at module load.
export const config = {
  config: {
    confirmPeriodBlocks: ethers.BigNumber.from('1'),
    stakeToken: ethers.constants.AddressZero,
    baseStake: 8,
    wasmModuleRoot: '',
    owner: ethers.constants.AddressZero,
    loserStakeEscrow: ethers.constants.AddressZero,
    chainId: {{ .ChainID }},
    chainConfig: JSON.stringify({ chainId: {{ .ChainID }}, homesteadBlock: 0 }),
    minimumAssertionPeriod: 1,
    validatorAfkBlocks: 201600,
    genesisAssertionState: {
      globalState: {
        bytes32Vals: [ethers.constants.HashZero, ethers.constants.HashZero],
        u64Vals: [ethers.BigNumber.from('0'), ethers.BigNumber.from('0')],
      },
      machineStatus: 1,
      endHistoryRoot: ethers.constants.HashZero,
    },
    genesisInboxCount: 0,
    miniStakeValues: [4, 2, 1],
    layerZeroBlockEdgeHeight: 67108864,
    layerZeroBigStepEdgeHeight: 524288,
    layerZeroSmallStepEdgeHeight: 8388608,
    numBigStepLevel: 1,
    challengeGracePeriodBlocks: 10,
    bufferConfig: { threshold: 600, max: 14400, replenishRateInBasis: 500 },
    sequencerInboxMaxTimeVariation: {
      delayBlocks: ethers.BigNumber.from('5760'),
      futureBlocks: ethers.BigNumber.from('12'),
      delaySeconds: ethers.BigNumber.from('86400'),
      futureSeconds: ethers.BigNumber.from('3600'),
    },
    anyTrustFastConfirmer: ethers.constants.AddressZero,
  },
  validators: [],
  batchPosters: [],
  batchPosterManager: ethers.constants.AddressZero,
}
